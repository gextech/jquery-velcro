// Generated by CoffeeScript 1.10.0
(function() {
  var calculate_all_offsets, calculate_all_stickes, check_if_can_bottom, check_if_can_stick, check_if_can_unbottom, check_if_can_unstick, check_if_fit, event_handler, group_id, html_element, initialize_sticky, last_direction, last_scroll, offsets, placeholder, refresh_all_stickies, set_classes, stack, static_interval, test_all_offsets, test_for_scroll_and_offsets, test_node_enter, test_node_exit, test_node_passing, test_node_scroll, test_on_scroll, trigger, update_everything, update_margins, update_metrics, update_offsets, update_sticky, version, win, win_height;

  version = '0.1.0';

  offsets = {};

  group_id = 0;

  last_scroll = null;

  last_direction = 'initial';

  event_handler = null;

  static_interval = null;

  stack = {
    stickyNodes: [],
    contentNodes: []
  };

  win = $(window);

  win_height = win.height();

  html_element = $('html');

  trigger = function(type, params) {
    if (!event_handler) {
      return;
    }
    if (params == null) {
      params = {};
    }
    params.type = type;
    params.scrollY = last_scroll;
    return event_handler(params);
  };

  set_classes = function(name) {
    if (!html_element.hasClass(name)) {
      html_element.removeClass('backward forward static').addClass(name);
      trigger('direction', {
        from: last_direction,
        to: name
      });
      last_direction = name;
    }
  };

  test_on_scroll = function() {
    var scroll_top;
    scroll_top = win.scrollTop();
    if (last_scroll === scroll_top) {
      return;
    }
    if (!scroll_top) {
      if (html_element.hasClass('has-scroll')) {
        html_element.removeClass('has-scroll');
      }
    } else {
      if (!html_element.hasClass('has-scroll')) {
        html_element.addClass('has-scroll');
      }
    }
    set_classes(scroll_top < last_scroll ? 'backward' : scroll_top > last_scroll ? 'forward' : 'static');
    clearTimeout(static_interval);
    static_interval = setTimeout(function() {
      return set_classes('static');
    }, 260);
    last_scroll = scroll_top;
    trigger('tick');
    return true;
  };

  update_margins = function(node) {
    node.margin = {
      top: parseInt(node.el.css('margin-top'), 10)
    };
  };

  update_offsets = function(node) {
    if (!node.el) {
      node.el = $(node);
    }
    node.offset = {
      top: node.el.offset().top,
      height: node.el.outerHeight(true),
      is_passing: node.offset && node.offset.is_passing
    };
    update_margins(node);
  };

  update_metrics = function(i, node) {
    var fixed_bottom, should_update;
    fixed_bottom = (win_height - node.offset.top) + last_scroll;
    should_update = node.offset.top_from_bottom !== fixed_bottom || node.offset.index !== i;
    if (should_update) {
      node.offset.index = i;
      node.offset.top_from_bottom = fixed_bottom;
      node.offset.top_from_top = node.offset.top - last_scroll;
      node.offset.bottom_from_bottom = fixed_bottom - node.offset.height;
      node.offset.bottom_from_top = (node.offset.height - last_scroll) + node.offset.top;
      return true;
    }
  };

  test_node_passing = function(node) {
    if (node.offset.is_passing) {
      return trigger('passing', {
        node: node
      });
    }
  };

  test_node_scroll = function(node) {
    return trigger('scroll', {
      node: node
    });
  };

  test_node_enter = function(node) {
    if (node.offset.is_passing) {
      return;
    }
    if (node.offset.top_from_bottom <= 0) {
      return;
    }
    if (node.offset.bottom_from_top <= node.margin.top) {
      return;
    }
    node.offset.is_passing = true;
    return trigger('enter', {
      node: node,
      to: last_direction
    });
  };

  test_node_exit = function(node) {
    if (!node.offset.is_passing) {
      return;
    }
    if (!((node.offset.top_from_bottom <= 0) || (node.offset.bottom_from_top <= node.margin.top))) {
      return;
    }
    node.offset.is_passing = false;
    return trigger('exit', {
      node: node,
      to: last_direction
    });
  };

  test_all_offsets = function(scroll) {
    var i, j, len, node, ref;
    ref = stack.contentNodes;
    for (i = j = 0, len = ref.length; j < len; i = ++j) {
      node = ref[i];
      if (update_metrics(i, node)) {
        test_node_scroll(node);
        test_node_enter(node);
        test_node_exit(node);
        test_node_passing(node);
      }
    }
  };

  calculate_all_offsets = function() {
    var j, len, node, ref;
    ref = stack.contentNodes;
    for (j = 0, len = ref.length; j < len; j++) {
      node = ref[j];
      update_offsets(node);
    }
  };

  placeholder = function(node) {
    var fixed;
    fixed = {
      width: node.width,
      height: node.orig_height,
      float: node.el.css('float'),
      position: node.el.css('position'),
      verticalAlign: node.el.css('vertical-align')
    };
    return $('<div/>').css(fixed).css('display', 'none').insertBefore(node.el);
  };

  update_sticky = function(node) {
    var fixed_bottom, parent_height, parent_top;
    if (!offsets[node.data.group]) {
      offsets[node.data.group] = node.data.offset || 0;
    }
    node.offset_top = offsets[node.data.group];
    node.orig_height = node.el.outerHeight(true);
    if (!node.isFloat) {
      offsets[node.data.group] += node.orig_height;
    }
    if (node.isFixed) {
      return true;
    }
    parent_top = node.parent.offset().top;
    parent_height = node.parent.height();
    node.offset = node.el.offset();
    node.height = node.orig_height;
    node.width = node.el.outerWidth();
    node.position = node.el.position();
    node.passing_top = node.offset.top - node.offset_top;
    node.passing_height = node.orig_height + node.offset_top;
    node.passing_bottom = parent_top + parent_height;
    if (node.data.fit) {
      if (node.isFloat) {
        fixed_bottom = node.offset.top + node.orig_height;
        node.fixed_bottom = node.passing_bottom - fixed_bottom;
        node.passing_bottom = fixed_bottom;
      }
      if (node.height >= win_height) {
        node.passing_height = win_height;
        node.height = win_height - node.offset_top;
      }
    }
    return true;
  };

  initialize_sticky = function(node) {
    var data, el, parent;
    el = $(node);
    data = $.extend({}, el.data('sticky') || {});
    data.group || (data.group = 0);
    parent = data.parent ? el.closest(data.parent) : el.parent();
    if (!data.group) {
      if (!(parent.data('scrollKit_gid') > 0)) {
        parent.data('scrollKit_gid', group_id += 1);
      }
    }
    data.group += '.' + (parent.data('scrollKit_gid') || 0);
    node.el = el;
    node.data = data;
    node.parent = parent;
    node.offset = el.offset();
    node.position = el.position();
    node.display = el.css('display');
    node.isFloat = el.css('float') !== 'none';
    node.isFixed = data.fixed || (el.css('position') === 'fixed');
    if (update_sticky(node)) {
      node.placeholder = placeholder(node);
    }
  };

  check_if_fit = function(sticky) {
    var fitted_top;
    if (sticky.data.fit) {
      fitted_top = win_height + last_scroll - sticky.offset_top;
      if (fitted_top >= sticky.passing_top) {
        if (!sticky.el.hasClass('fit')) {
          sticky.el.addClass('fit');
        }
        return sticky.el.css('height', Math.min(fitted_top - sticky.passing_top, sticky.height));
      } else {
        if (sticky.el.hasClass('fit')) {
          return sticky.el.removeClass('fit');
        }
      }
    }
  };

  check_if_can_stick = function(sticky) {
    if (!sticky.el.hasClass('stuck')) {
      if (sticky.placeholder) {
        sticky.placeholder.css('display', sticky.display);
      }
      return sticky.el.addClass('stuck').css({
        position: 'fixed',
        width: sticky.width,
        height: sticky.height,
        left: sticky.offset.left,
        top: sticky.offset_top,
        bottom: sticky.data.fit ? 0 : void 0
      });
    }
  };

  check_if_can_unstick = function(sticky) {
    if (sticky.el.hasClass('stuck')) {
      if (sticky.placeholder) {
        sticky.placeholder.css('display', 'none');
      }
      return sticky.el.removeClass('fit stuck bottom').attr('style', '');
    }
  };

  check_if_can_bottom = function(sticky) {
    if (!sticky.el.hasClass('bottom')) {
      return sticky.el.addClass('bottom').css({
        position: 'absolute',
        left: sticky.position.left,
        bottom: sticky.fixed_bottom || 0,
        top: 'auto',
        height: sticky.data.fit ? sticky.height : void 0
      });
    }
  };

  check_if_can_unbottom = function(sticky) {
    if (sticky.el.hasClass('bottom')) {
      return sticky.el.removeClass('bottom').css({
        position: 'fixed',
        left: sticky.offset.left,
        top: sticky.offset_top
      });
    }
  };

  calculate_all_stickes = function(scroll) {
    var j, len, ref, sticky;
    ref = stack.stickyNodes;
    for (j = 0, len = ref.length; j < len; j++) {
      sticky = ref[j];
      if (sticky.isFixed) {
        continue;
      }
      if (last_scroll <= sticky.passing_top) {
        check_if_can_unstick(sticky);
      } else {
        check_if_can_stick(sticky);
        if ((last_scroll + sticky.passing_height) >= sticky.passing_bottom) {
          check_if_can_bottom(sticky);
        } else {
          check_if_can_unbottom(sticky);
        }
      }
      check_if_fit(sticky);
    }
  };

  refresh_all_stickies = function(destroy) {
    var j, len, ref, sticky;
    offsets = {};
    ref = stack.stickyNodes;
    for (j = 0, len = ref.length; j < len; j++) {
      sticky = ref[j];
      if (!sticky.el) {
        initialize_sticky(sticky);
      } else {
        sticky.el.attr('style', '').removeClass('fit stuck bottom');
        sticky.placeholder.remove();
        if (!destroy) {
          update_sticky(sticky);
          sticky.placeholder = placeholder(sticky);
        }
      }
    }
  };

  test_for_scroll_and_offsets = function() {
    if (test_on_scroll()) {
      test_all_offsets();
      calculate_all_stickes();
    }
  };

  update_everything = function(destroy) {
    last_scroll = null;
    win_height = win.height();
    refresh_all_stickies(destroy);
    calculate_all_offsets();
    test_for_scroll_and_offsets();
    return trigger('update', {
      stack: stack
    });
  };

  win.on('touchmove scroll', function() {
    return test_for_scroll_and_offsets();
  });

  win.on('resize', function() {
    return update_everything();
  });

  $.scrollKit = function(params, callback) {
    var content_className, sticky_className;
    if (typeof params === 'function') {
      event_handler = params;
      params = void 0;
    }
    if (params == null) {
      params = {};
    }
    if (params === 'destroy') {
      update_everything(true);
    } else {
      if (params !== 'update') {
        sticky_className = params.stickyClassName || 'is-sticky';
        content_className = params.contentClassName || 'is-content';
        stack.stickyNodes = document.getElementsByClassName(sticky_className);
        stack.contentNodes = document.getElementsByClassName(content_className);
      }
      update_everything();
    }
  };

  $.scrollKit.update = function() {
    return update_everything();
  };

  $.scrollKit.destroy = function() {
    return update_everything(true);
  };

  $.scrollKit.scrollTo = function(index, offset_top) {
    html_element.animate({
      scrollTop: stack.contentNodes[index].offset.top - (offset_top || 0)
    }, 260, 'swing');
  };

  $.scrollKit.eventHandler = function(callback) {
    var old_handler;
    old_handler = event_handler;
    if (typeof callback === 'function') {
      event_handler = callback;
    }
    return old_handler;
  };

}).call(this);
