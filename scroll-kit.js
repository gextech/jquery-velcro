// Generated by CoffeeScript 1.10.0
(function() {
  var calculate_all_stickes, check_if_can_bottom, check_if_can_stick, check_if_can_unbottom, check_if_can_unstick, check_if_fit, group_id, initialize_sticky, placeholder, refresh_all_stickies, stack, update_everything, update_sticky, win, win_height;

  group_id = 0;

  stack = {
    nodes: [],
    offsets: {}
  };

  win = $(window);

  win_height = win.height();

  placeholder = function(node) {
    var fixed;
    fixed = {
      width: node.width,
      height: node.orig_height,
      float: node.el.css('float'),
      position: node.el.css('position'),
      verticalAlign: node.el.css('vertical-align')
    };
    return $('<div/>').css(fixed).css('display', 'none').insertBefore(node.el);
  };

  update_sticky = function(node) {
    var fixed_bottom, parent_height, parent_top;
    if (!stack.offsets[node.data.group]) {
      stack.offsets[node.data.group] = node.data.offset || 0;
    }
    node.offset_top = stack.offsets[node.data.group];
    node.orig_height = node.el.outerHeight(true);
    if (!node.isFloat) {
      stack.offsets[node.data.group] += node.orig_height;
    }
    if (node.isFixed) {
      return true;
    }
    parent_top = node.parent.offset().top;
    parent_height = node.parent.height();
    node.offset = node.el.offset();
    node.height = node.orig_height;
    node.width = node.el.outerWidth();
    node.position = node.el.position();
    node.passing_top = node.offset.top - node.offset_top;
    node.passing_height = node.orig_height + node.offset_top;
    node.passing_bottom = parent_top + parent_height;
    if (node.data.fit) {
      if (node.isFloat) {
        fixed_bottom = node.offset.top + node.orig_height;
        node.fixed_bottom = node.passing_bottom - fixed_bottom;
        node.passing_bottom = fixed_bottom;
      }
      if (node.height >= win_height) {
        node.passing_height = win_height;
        node.height = win_height - node.offset_top;
      }
    }
    return true;
  };

  initialize_sticky = function(node, params) {
    var data, parent;
    if (params == null) {
      params = {};
    }
    data = $.extend({}, params, node.data('sticky') || {});
    data.group || (data.group = 0);
    parent = data.parent ? node.closest(data.parent) : node.parent();
    if (!data.group) {
      if (!(parent.data('velcro_gid') > 0)) {
        parent.data('velcro_gid', group_id += 1);
      }
    }
    data.group += '.' + (parent.data('velcro_gid') || 0);
    node = {
      el: node,
      data: data,
      parent: parent,
      offset: node.offset(),
      position: node.position(),
      display: node.css('display'),
      isFloat: node.css('float') !== 'none',
      isFixed: data.fixed || (node.css('position') === 'fixed')
    };
    if (update_sticky(node)) {
      node.placeholder = placeholder(node);
      return stack.nodes.push(node);
    }
  };

  check_if_fit = function(sticky, scroll_top) {
    var fitted_top;
    if (sticky.data.fit) {
      fitted_top = win_height + scroll_top - sticky.offset_top;
      if (fitted_top >= sticky.passing_top) {
        if (!sticky.el.hasClass('fit')) {
          sticky.el.addClass('fit');
        }
        return sticky.el.css('height', Math.min(fitted_top - sticky.passing_top, sticky.height));
      } else {
        if (sticky.el.hasClass('fit')) {
          return sticky.el.removeClass('fit');
        }
      }
    }
  };

  check_if_can_stick = function(sticky, scroll_top) {
    if (!sticky.el.hasClass('stuck')) {
      if (sticky.placeholder) {
        sticky.placeholder.css('display', sticky.display);
      }
      return sticky.el.addClass('stuck').css({
        position: 'fixed',
        width: sticky.width,
        height: sticky.height,
        left: sticky.offset.left,
        top: sticky.offset_top,
        bottom: sticky.data.fit ? 0 : void 0
      });
    }
  };

  check_if_can_unstick = function(sticky, scroll_top) {
    if (sticky.el.hasClass('stuck')) {
      if (sticky.placeholder) {
        sticky.placeholder.css('display', 'none');
      }
      return sticky.el.removeClass('fit stuck bottom').attr('style', '');
    }
  };

  check_if_can_bottom = function(sticky) {
    if (!sticky.el.hasClass('bottom')) {
      return sticky.el.addClass('bottom').css({
        position: 'absolute',
        left: sticky.position.left,
        bottom: sticky.fixed_bottom || 0,
        top: 'auto',
        height: sticky.data.fit ? sticky.height : void 0
      });
    }
  };

  check_if_can_unbottom = function(sticky) {
    if (sticky.el.hasClass('bottom')) {
      return sticky.el.removeClass('bottom').css({
        position: 'fixed',
        left: sticky.offset.left,
        top: sticky.offset_top
      });
    }
  };

  calculate_all_stickes = function() {
    var scroll_top;
    scroll_top = win.scrollTop();
    stack.nodes.forEach(function(sticky) {
      if (sticky.isFixed) {
        return;
      }
      if (scroll_top <= sticky.passing_top) {
        check_if_can_unstick(sticky, scroll_top);
      } else {
        check_if_can_stick(sticky, scroll_top);
        if ((scroll_top + sticky.passing_height) >= sticky.passing_bottom) {
          check_if_can_bottom(sticky);
        } else {
          check_if_can_unbottom(sticky);
        }
      }
      return check_if_fit(sticky, scroll_top);
    });
    return void 0;
  };

  refresh_all_stickies = function(destroy) {
    stack.offsets = {};
    win_height = win.height();
    return stack.nodes = stack.nodes.filter(function(sticky) {
      sticky.el.attr('style', '').removeClass('fit stuck bottom');
      sticky.placeholder.remove();
      if (!destroy) {
        update_sticky(sticky);
        sticky.placeholder = placeholder(sticky);
        return true;
      }
      return false;
    });
  };

  update_everything = function(destroy) {
    refresh_all_stickies(destroy);
    return calculate_all_stickes();
  };

  win.on('touchmove scroll', function() {
    return calculate_all_stickes();
  });

  win.on('resize', function() {
    return update_everything();
  });

  $.scrollKit = function(selector, params) {
    if (params == null) {
      params = {};
    }
    if (selector === 'destroy') {
      update_everything(true);
    } else {
      if (selector !== 'update') {
        $(selector).each(function() {
          return initialize_sticky($(this), params);
        });
      }
      update_everything();
    }
    return void 0;
  };

}).call(this);
